// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectMana;

#nullable disable

namespace ProjectMana.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectMana.Group", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<long>("LeaderId")
                        .HasColumnType("bigint")
                        .HasColumnName("leaderId");

                    b.HasKey("Name");

                    b.HasIndex("LeaderId")
                        .IsUnique();

                    b.ToTable("groups");
                });

            modelBuilder.Entity("ProjectMana.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("GroupName")
                        .HasColumnType("text")
                        .HasColumnName("group_name")
                        .HasAnnotation("Relational:JsonPropertyName", "groupName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<string>("SpotifyUserCode")
                        .HasColumnType("text")
                        .HasColumnName("spotify_user_id")
                        .HasAnnotation("Relational:JsonPropertyName", "spotifyUserId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username")
                        .HasAnnotation("Relational:JsonPropertyName", "username");

                    b.HasKey("Id");

                    b.HasIndex("GroupName");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");

                    b.HasAnnotation("Relational:JsonPropertyName", "leader");
                });

            modelBuilder.Entity("ProjectMana.Group", b =>
                {
                    b.HasOne("ProjectMana.User", "Leader")
                        .WithOne()
                        .HasForeignKey("ProjectMana.Group", "LeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("ProjectMana.User", b =>
                {
                    b.HasOne("ProjectMana.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupName");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ProjectMana.Group", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
