// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YSpotify;

#nullable disable

namespace YSpotify.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240229082602_SeedSpotifyLogin")]
    partial class SeedSpotifyLogin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("YSpotify.Group", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<long>("LeaderId")
                        .HasColumnType("bigint")
                        .HasColumnName("leader_id");

                    b.HasKey("Name");

                    b.HasIndex("LeaderId");

                    b.ToTable("groups");

                    b.HasData(
                        new
                        {
                            Name = "TestGroup",
                            LeaderId = 1L
                        });
                });

            modelBuilder.Entity("YSpotify.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("GroupName")
                        .HasColumnType("text")
                        .HasColumnName("group_name")
                        .HasAnnotation("Relational:JsonPropertyName", "group_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<string>("SpotifyAccessToken")
                        .HasColumnType("text")
                        .HasColumnName("spotify_access_token");

                    b.Property<long?>("SpotifyAccessTokenExpiration")
                        .HasColumnType("bigint")
                        .HasColumnName("spotify_access_token_expiration");

                    b.Property<string>("SpotifyRefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("spotify_refresh_token");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username")
                        .HasAnnotation("Relational:JsonPropertyName", "username");

                    b.HasKey("Id");

                    b.HasIndex("GroupName");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");

                    b.HasAnnotation("Relational:JsonPropertyName", "leader");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            GroupName = "TestGroup",
                            Password = "Dk8ZVuZjmsgVtJDfLv74gA3Rc4+D63N4lGH6JvauMvA=",
                            SpotifyAccessToken = "BQAb7XgAXhct_76b67aYGEd87CrbmwWht_nrM2by_sWBbbuMwgPU0AMbd_GEnHhEa4dpPwAraQ74FrVVUi0EJs7JCk8ZKkkkuBPzQXO87NlL1JuuCEanSwCYxPWxoWvUE_JTAq_2C7qdF_ZgIos1j24C1q9oxk6_Y95qpFs_-V6Dj697vPQRnIhnXOpxwZw1guzi5zNOXybeBYTpKkKfRZaSjJiiwjzN4WlAq1G_uIG2EU0e7kPKhjMPoPDM1PR2MYAzC_Ll1Q6UNWU_oGWl7w",
                            SpotifyAccessTokenExpiration = 1709195411L,
                            SpotifyRefreshToken = "AQC40pbscT1uJqiPWb-PVw8xy9QkDt0bEz0K8VGmUCKXWf7ySZgQw_fWom4e8-npHXYA_UKjBr2A39mmQXtAt4YRUFQ1rGFXrFhAlBqIpuYKhyeAc5NEQcXjMOfk-jkJORw",
                            Username = "TestUser"
                        });
                });

            modelBuilder.Entity("YSpotify.Group", b =>
                {
                    b.HasOne("YSpotify.User", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("YSpotify.User", b =>
                {
                    b.HasOne("YSpotify.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupName");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("YSpotify.Group", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
